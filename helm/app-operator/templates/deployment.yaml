apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.name }}
    giantswarm.io/service-type: "managed"
spec:
  selector:
    matchLabels:
      app: {{ .Values.name }}
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
        giantswarm.io/service-type: "managed"
      annotations:
        releasetime: {{ $.Release.Time }}
    spec:
      volumes:
      - name: {{ .Values.name }}
        configMap:
          name: {{ .Values.name }}
          items:
          - key: config.yaml
            path: config.yaml
      serviceAccountName: {{ .Values.name }}
      securityContext:
        runAsUser: {{ .Values.userID }}
        runAsGroup: {{ .Values.groupID }}
      containers:
      - name: {{ .Values.name }}
        image: "{{ .Values.Installation.V1.Registry.Domain }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        volumeMounts:
        - name: {{ .Values.name }}
          mountPath: /var/run/{{ .Values.name }}/configmap/
        ports:
        - name: http
          containerPort: {{ .Values.port }}
        args:
        - daemon
        - --config.dirs=/var/run/{{ .Values.name }}/configmap/
        - --config.files=config
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.port }}
          initialDelaySeconds: 15
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.port }}
          initialDelaySeconds: 15
          timeoutSeconds: 1
        resources:
{{ toYaml .Values.resources | indent 10 }}
