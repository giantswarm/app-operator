version: 2.1
orbs:
  architect: giantswarm/architect@0.4.5

  inline-orb:
    executors:
      machine-executor:
        machine: true
    commands:
      install-go:
        steps:
          - run:
              name: "Remove old Go"
              command: |
                sudo rm -rf /usr/local/go
          - run:
              name: "Download Go"
              command: |
                wget https://dl.google.com/go/go1.13.4.linux-amd64.tar.gz
          - run:
              name: "Check downloaded Go checksum"
              command: |
                [[ "$(sha256sum go1.13.4.linux-amd64.tar.gz | cut -d ' ' -f 1)" == "692d17071736f74be04a72a06dab9cac1cd759377bd85316e52b2227604c004c" ]]
          - run:
              name: "Install Go"
              command: |
                sudo tar -C /usr/local -xzf go1.13.4.linux-amd64.tar.gz
          - run:
              name: "Set Go environment"
              command: |
                go env -w GOBIN=/home/circleci/.go_workspace/bin
          - run:
              name: "Create $GOPATH directory"
              command: |
                sudo mkdir $(go env GOPATH) && sudo chown $USER $(go env GOPATH)
          - run:
              name: "Remove downloaded Go files"
              command: |
                rm go1.13.4.linux-amd64.tar.gz
          - run: 
              name: "Check Go version"
              command: |
                go version

      install-tools:
        steps:
          - run:
              name: "Install kind"
              command: |
                CGO_ENABLED=0 GO111MODULE="on" go get sigs.k8s.io/kind@v0.7.0
          - run:
              name: "Install kubectl"
              command: |
                curl -LO https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl
                chmod +x ./kubectl
                sudo mv ./kubectl /usr/local/bin/kubectl
                kubectl version --client

      create-cluster:
        parameters:
          kind-config:
            type: string
        steps:
          - run:
              name: "Create cluster"
              command: |
                cd ~/project
                
                if [ -e << parameters.kind-config >> ]; then
                  cp << parameters.kind-config >> kind-config.yaml
                else
                  echo "kind: Cluster" >> kind-config.yaml
                  echo "apiVersion: kind.sigs.k8s.io/v1alpha3" >> kind-config.yaml
                fi

                kind create cluster --config kind-config.yaml --image quay.io/giantswarm/kind-node:$KUBERNETES_VERSION

      test-setup:
        parameters:
          setup-script:
            type: string
        steps:
          - run:
              name: "Run test setup commands"
              command: |
                if [ -e << parameters.setup-script >> ]; then
                  echo << parameters.setup-script >>
                  sh << parameters.setup-script >>
                fi

      go-test:
        parameters:
          env:
            type: string
          test-dir:
            type: string
        steps:
          - run:
              name: "Create .env file"
              command: |
                echo '<< parameters.env >>' | sed -e 's/^\(.\)/export \1/' > .env
          - run:
              # TODO remove this part after switch to Go modules.
              name: "Move code to $GOPATH"
              command: |
                mkdir -p $GOPATH/src/github.com/${CIRCLE_PROJECT_USERNAME} && mv ~/project $GOPATH/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
          - run:
              name: "Run test"
              command: |
                cd $GOPATH/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
                source .env
                CGO_ENABLED=0 E2E_KUBECONFIG=~/.kube/config go test -tags k8srequired -timeout 20m -v << parameters.test-dir >>

      export-logs:
        steps:
          - run:
              name: "Export cluster logs"
              command: |
                kind export logs ./kind/logs
              when: always
          - store_artifacts:
              path: ./kind/logs
              destination: logs

    jobs:
      integration-test:
        environment:
          GOPATH: /go
          KUBERNETES_VERSION: v1.16.3
        parameters:
          env:
            default: ""
            description: |
              Environment variables configuration. Must be in following format:

                  VAR_A="VALUE_A"
                  VAR_B="VALUE_B"
            type: string
          kind-config:
            default: "kind-config.yaml"
            description: "Path to kind config file."
            type: string
          setup-script:
            default: "setup.sh"
            description: "Path to setup script with commands to execute before each test."
            type: string
          test-dir:
            description: "Tested package directory."
            type: string
        executor: machine-executor
        steps:
          - checkout
          - attach_workspace:
              at: .
          - install-go
          - install-tools
          - create-cluster:
              kind-config: << parameters.kind-config >>
          - test-setup:
              setup-script: << parameters.setup-script >>
          - go-test:
              env: << parameters.env >>
              test-dir: << parameters.test-dir >>
          - export-logs

jobs:
  build:
    machine: true
    steps:
    - checkout

    - run: |
        wget -q $(curl -sS -H "Authorization: token $RELEASE_TOKEN" https://api.github.com/repos/giantswarm/architect/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
        chmod +x ./architect
        ./architect version
    - run: ./architect build
    - store_test_results:
        path: /tmp/results
    - persist_to_workspace:
        root: .
        paths:
        - ./app-operator
        - ./architect

  deploy:
    machine: true
    steps:
    - checkout
    - attach_workspace:
        at: .
    - deploy:
        command: |
            ./architect deploy

workflows:
  build_e2e:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/

      - architect/push-to-docker:
          name: push-app-operator-to-quay
          image: "quay.io/giantswarm/app-operator"
          username_envar: "QUAY_USERNAME"
          password_envar: "QUAY_PASSWORD"
          requires:
            - build

      - architect/push-to-docker:
          name: push-app-operator-to-aliyun
          image: "registry-intl.cn-shanghai.aliyuncs.com/giantswarm/app-operator"
          username_envar: "ALIYUN_USERNAME"
          password_envar: "ALIYUN_PASSWORD"
          requires:
            - build
          # Needed to trigger job only on merge to master.
          filters:
            branches:
              only: master
      - architect/push-to-docker-legacy:
          name: push-app-operator-to-aliyun-legacy
          image: "registry-intl.cn-shanghai.aliyuncs.com/giantswarm/app-operator"
          username_envar: "ALIYUN_USERNAME"
          password_envar: "ALIYUN_PASSWORD"
          # Push to Aliyun should execute for non-master branches only once manually approved.
          requires:
            - build

      - inline-orb/integration-test:
          name: basic-integration-test
          test-dir: "./integration/test/app/basic"
          requires:
            - build

      - inline-orb/integration-test:
          name: kubeconfig-integration-test
          kind-config: "./integration/config/kind-config.yaml"
          setup-script: "./integration/config/setup.sh"
          test-dir: "./integration/test/app/kubeconfig"
          requires:
            - build

      - deploy:
          name: deploy
          requires:
            - push-app-operator-to-aliyun-legacy
          filters:
            branches:
              only: master
